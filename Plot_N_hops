import pandas as pd
import ssl
import time
import textwrap
from matplotlib import pyplot as plt
from matplotlib.patches import FancyArrowPatch

def get_df(addr):
    ssl._create_default_https_context = ssl._create_unverified_context
    transactions_url = 'https://blockchain.info/rawaddr/' + addr
    df = pd.read_json(transactions_url)
    time.sleep(10)
    return df

def find_transactions(df): 
    transactions = df['txs']
    return transactions 

def find_outputaddr(df):
    outputs = find_transactions(df) 
    adr = []
    for i in outputs:
        output = i['out'][0]['addr']
        adr.append(output)
    return adr

def find_amounts(df):
    amounts = find_transactions(df)
    amt = []
    for a in amounts:
        amount = a['result']
        amt.append(amount)
    return amt

## Horizontal plotting
def get_hops(frame,N,hops):
    trns = []
    amts = []
    
    for i in range(hops+1):
        addr = find_outputaddr(frame)[0] # retrieves first address
        trns.append(addr) # adds address to trns
        
        amt = find_amounts(frame)[0]
        amts.append(amt)
        
        addr = find_outputaddr(frame)[0] # moves onto the next address

        frame = get_df(addr) # collect new set of df
        time.sleep(10)
        print('one transaction complete...')
    return trns,amts

def plot(hops): ## plot number of hops
    sending_rectangle = plt.Rectangle((3, 3), width=4, height=2, facecolor="gainsboro", edgecolor="black")
    plt.annotate(textwrap.fill(addr,width=17), ((0)*7+5, 4), horizontalalignment='center', verticalalignment='center', fontsize=6)
    ax = plt.gca()  
    for n in range(hops):
        rect = plt.Rectangle((7*(n+1)+3,3), width=4, height=2, facecolor="gainsboro", edgecolor="black")
        arrow = FancyArrowPatch((7*(n+1), 4), (7*(n)+10,4), edgecolor="lightgray", arrowstyle="simple",mutation_scale=10,connectionstyle="angle3")
        plt.annotate(str(dataframe['Amount'][n]/(10**8)) + ' BTC', (7.1+7*(n), 3.6), fontsize=6)
        plt.annotate(textwrap.fill(dataframe['Transactions'][n],width=17), (12+7*(n), 4), horizontalalignment='center', verticalalignment='center', fontsize=6)
        
        ax.add_patch(rect)
        ax.add_patch(arrow)      
    ax.add_patch(sending_rectangle)


def show_plot():
    plt.axis("scaled")
    plt.axis("off")
    plt.show()
    
